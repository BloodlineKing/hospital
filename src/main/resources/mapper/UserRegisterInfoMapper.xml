<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dyhc.hospital.dao.UserRegisterInfoMapper">
    <!--查询个人的预约记录-->
    <select id="findUserRegisterInfos" resultType="com.dyhc.hospital.entity.UserRegisterInfo">
        SELECT * FROM `user_register_info` WHERE `create_time` IS NULL AND `create_by` IS NULL
        <if test="nameCode != null and nameCode != ''">
            and name_code = #{nameCode}
        </if>
        <if test="telephone != null and telephone != ''">
            and telephone = #{telephone}
        </if>
    </select>
    <!--根据用户编号查看存档信息 存在这个用户 就把用户信息显示出来,并且检查次数加1==>updArchivesCheckCount()方法-->
    <select id="findUserRegisterInfoByTestNumber" resultType="com.dyhc.hospital.entity.UserRegisterInfo" >
        SELECT * FROM `user_register_info` WHERE `test_number` = #{testNumber};
    </select>
    <!--进行用户登记信息-->
    <insert id="registerUserInfo">
        INSERT INTO `hospital_test_manager_db`.`user_register_info` ( `test_number`,`user_name`,`age`,`born`,`sex`,`id_card`,
              `marital_status`, `telephone`, `address`, `name_code`,`work_number`,`person_type`,
                `status`,`belongto_units`,`create_time`,`create_by`)
        VALUES( #{testNumber}, #{userName}, #{age},#{born},#{sex},#{idCard}, #{maritalStatus}, #{telephone},#{address},#{nameCode}
        ,#{workNumber}, #{personType},#{status},#{belongtoUnits},now(), #{createBy});
    </insert>


    <!--刘杰——登记前根据姓名拼音简码查找是否有预约记录-->
    <select id="findUserInfoByNameCode" resultType="com.dyhc.hospital.entity.UserRegisterInfo">
        SELECT * FROM `user_register_info` where name_code = #{nameCode}
    </select>

    <!--刘杰——根据拼音简码和电话号查询用户信息-->
    <select id="getUserInfoByNameAndTelephone" resultType="com.dyhc.hospital.entity.UserRegisterInfo">
        SELECT * FROM `user_register_info` where name_code = #{name} and telephone=#{telephone}
    </select>

    <!--刘杰——修改档案中的体检次数，如果返回1说明修改成功并存在该用户信息，如果返回0说明档案里没有该用户-->
    <update id="isHaveBefore">
        update archives set check_count=check_count+1 where test_number=#{testNumber}
    </update>

    <!--刘杰——添加预约-->
    <insert id="insertAppointment" parameterType="com.dyhc.hospital.entity.UserRegisterInfo">
        INSERT INTO `user_register_info` ( `test_number`,`user_name`,`sex`,
              `telephone`, `name_code`)
        VALUES( #{testNumber}, #{userName},#{sex},  #{telephone},#{nameCode});
    </insert>

    <!--刘杰——修改预约为登记-->
    <update id="setAppointmentToRegister" parameterType="com.dyhc.hospital.entity.UserRegisterInfo">
    UPDATE
  `hospital_test_manager_db`.`user_register_info`
SET
  `user_name` =  #{userName},`age` =  #{age},`born` =  #{born},
  `sex` = #{sex},`id_card` = #{idCard},
`marital_status` =  #{maritalStatus},
`telephone` =  #{telephone},`address` =  #{address},
  `name_code` = #{nameCode},
  `work_number` =  #{workNumber},`person_type` =  #{personType},
  `status` = #{status},
  `belongto_units` =  #{belongtoUnits},
  `create_time` = now(),
  `create_by` =#{createBy}
WHERE `test_number` =  #{testNumber};
    </update>

    <!--刘杰——获取今天的最近的一次体检编号-->
    <select id="getTestNumber" resultType="java.lang.String">
        select test_number from user_register_info where test_number like CONCAT(#{today},'%') order by test_number desc limit 0,1
    </select>

    <!-- 根据用户体检编号查询用户信息    李文荣-->
    <select id="findTestNumberUserRegisterInfo" resultType="com.dyhc.hospital.entity.UserRegisterInfo" >
        SELECT * FROM `user_register_info` WHERE `test_number` = #{testNumber};
    </select>

    <!--根据用户体检编号查看用户下边的体检项目  李文荣-->
    <select id="showUserMedical" resultType="com.dyhc.hospital.entity.Medical">
        SELECT m.*,uti.`test_status` FROM `user_test_info` uti
        INNER JOIN `medical` m ON m.`medical_id` = uti.`medical_id`
        WHERE uti.test_number = #{testNumber}
        UNION
        SELECT m.*,uti.`test_status` FROM `user_test_info` uti
        INNER JOIN `combination_ medical` cm ON uti.`combination_id` = cm.`combination_id`
        INNER JOIN `medical` m ON cm.`medical_id` = m.`medical_id`
        WHERE uti.test_number = #{testNumber}
        UNION
        SELECT m.*,uti.`test_status`
        FROM `user_test_info` uti
        INNER JOIN `package_medical` pm ON uti.package_id = pm.package_id
        INNER JOIN `combination_ medical` cm ON pm.combination_id = cm.combination_id
        INNER JOIN `medical` m ON m.`medical_id` = cm.medical_id
        WHERE uti.test_number = #{testNumber}
        UNION
        SELECT m.*,uti.`test_status`
        FROM `user_test_info` uti
        INNER JOIN `package_medical` pm ON uti.package_id = pm.package_id
        INNER JOIN `medical` m ON pm.`medical_id` = m.medical_id
        WHERE uti.test_number = #{testNumber}

    </select>
</mapper>